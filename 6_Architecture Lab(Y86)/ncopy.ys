#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddl $-4,%edx
	jl Ending

fLoop:	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi

	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Cal1		# if so, goto Npos:
	iaddl $1, %eax		# count++

Cal1:	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
	jle Cal2		# if so, goto Npos:
	iaddl $1, %eax		# count++

Cal2:	mrmovl 8(%ebx), %esi	# read val from src...
	mrmovl 12(%ebx), %edi

	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Cal3		# if so, goto Npos:
	iaddl $1, %eax		# count++

Cal3:	rmmovl %edi, 12(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
	jle Judge		# if so, goto Npos:
	iaddl $1, %eax		# count++

Judge:	iaddl $16, %ebx
	iaddl $16, %ecx
	iaddl $-4, %edx
	jl Ending
	jmp fLoop

Ending:	iaddl $4, %edx
	
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddl $-2, %edx
	jl End1

	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi

	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle eCal1		# if so, goto Npos:
	iaddl $1, %eax		# count++

eCal1:	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
	jle eCal2		# if so, goto Npos:
	iaddl $1, %eax		# count++

eCal2:	iaddl $8, %ebx
	iaddl $8, %ecx

	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	jmp End2

End1:	iaddl $2, %edx
End2:	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddl $1, %eax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	leave
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
